// Example Jenkins Pipeline for deploying Java applications with Contrast agent

pipeline {
    agent any
    
    parameters {
        string(
            name: 'IMAGE_TAG',
            defaultValue: 'latest',
            description: 'Docker image tag to deploy'
        )
        choice(
            name: 'ENVIRONMENT',
            choices: ['development', 'qa', 'staging', 'production'],
            description: 'Target deployment environment'
        )
        booleanParam(
            name: 'ENABLE_CONTRAST_IN_TARGET_ENV',
            defaultValue: false,
            description: 'Enable the Contrast agent for this deployment?'
        )
        string(
            name: 'APP_NAME',
            defaultValue: '',
            description: 'Application name (auto-detected if empty)'
        )
    }
    
    environment {
        AWS_DEFAULT_REGION = 'us-east-1'
        TERRAFORM_VERSION = '1.5.0'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    // Auto-detect application name if not provided
                    if (params.APP_NAME == '') {
                        env.APP_NAME = sh(
                            script: "basename `git rev-parse --show-toplevel`",
                            returnStdout: true
                        ).trim()
                    } else {
                        env.APP_NAME = params.APP_NAME
                    }
                    echo "Application Name: ${env.APP_NAME}"
                }
            }
        }
        
        stage('Detect Application Type') {
            steps {
                script {
                    // Method 1: Check for Java build files
                    def hasJavaBuildFile = fileExists('pom.xml') || 
                                          fileExists('build.gradle') || 
                                          fileExists('build.gradle.kts')
                    
                    // Method 2: Check Docker image labels
                    def imageLang = ''
                    if (!hasJavaBuildFile) {
                        try {
                            imageLang = sh(
                                script: """
                                    aws ecr get-login-password | docker login --username AWS --password-stdin ${env.ECR_REGISTRY}
                                    docker pull ${env.ECR_REGISTRY}/${env.APP_NAME}:${params.IMAGE_TAG}
                                    docker inspect --format '{{index .Config.Labels "com.liberty.app.language"}}' ${env.ECR_REGISTRY}/${env.APP_NAME}:${params.IMAGE_TAG}
                                """,
                                returnStdout: true
                            ).trim()
                        } catch (Exception e) {
                            echo "Could not inspect Docker image: ${e.message}"
                        }
                    }
                    
                    env.IS_JAVA_APP = (hasJavaBuildFile || imageLang == 'java') ? 'true' : 'false'
                    echo "Is Java Application: ${env.IS_JAVA_APP}"
                    echo "Contrast enabled for environment: ${params.ENABLE_CONTRAST_IN_TARGET_ENV}"
                }
            }
        }
        
        stage('Configure Contrast') {
            steps {
                script {
                    // Determine if Contrast should be enabled
                    if (env.IS_JAVA_APP == 'true' && params.ENABLE_CONTRAST_IN_TARGET_ENV) {
                        env.TF_VAR_contrast_enabled = 'true'
                        echo "Decision: Contrast will be ENABLED for this deployment"
                    } else {
                        env.TF_VAR_contrast_enabled = 'false'
                        echo "Decision: Contrast will be DISABLED for this deployment"
                        if (env.IS_JAVA_APP != 'true') {
                            echo "Reason: Not a Java application"
                        } else {
                            echo "Reason: ENABLE_CONTRAST_IN_TARGET_ENV is false"
                        }
                    }
                    
                    // Set other Terraform variables
                    env.TF_VAR_app_name = env.APP_NAME
                    env.TF_VAR_app_image = "${env.ECR_REGISTRY}/${env.APP_NAME}:${params.IMAGE_TAG}"
                    env.TF_VAR_environment = params.ENVIRONMENT
                }
            }
        }
        
        stage('Fetch Secrets') {
            when {
                expression { env.TF_VAR_contrast_enabled == 'true' }
            }
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'contrast-api-key', variable: 'CONTRAST_API_KEY'),
                        string(credentialsId: 'contrast-service-key', variable: 'CONTRAST_SERVICE_KEY'),
                        string(credentialsId: 'contrast-user-name', variable: 'CONTRAST_USER_NAME')
                    ]) {
                        env.TF_VAR_contrast_api_key = CONTRAST_API_KEY
                        env.TF_VAR_contrast_service_key = CONTRAST_SERVICE_KEY
                        env.TF_VAR_contrast_user_name = CONTRAST_USER_NAME
                    }
                }
            }
        }
        
        stage('Terraform Init') {
            steps {
                dir('terraform/environments/' + params.ENVIRONMENT) {
                    sh '''
                        terraform init \
                            -backend-config="key=${APP_NAME}/${ENVIRONMENT}/terraform.tfstate"
                    '''
                }
            }
        }
        
        stage('Terraform Plan') {
            steps {
                dir('terraform/environments/' + params.ENVIRONMENT) {
                    sh '''
                        terraform plan \
                            -var="app_name=${APP_NAME}" \
                            -var="environment=${ENVIRONMENT}" \
                            -out=tfplan
                    '''
                }
            }
        }
        
        stage('Approval') {
            when {
                expression { params.ENVIRONMENT == 'production' }
            }
            steps {
                input message: 'Deploy to production?', ok: 'Deploy'
            }
        }
        
        stage('Terraform Apply') {
            steps {
                dir('terraform/environments/' + params.ENVIRONMENT) {
                    sh 'terraform apply -auto-approve tfplan'
                }
            }
        }
        
        stage('Post Deployment Validation') {
            when {
                expression { env.TF_VAR_contrast_enabled == 'true' }
            }
            steps {
                script {
                    // Wait for service to stabilize
                    sleep(time: 60, unit: 'SECONDS')
                    
                    // Check if Contrast agent initialized successfully
                    def logGroupName = "/ecs/${env.APP_NAME}/contrast-init"
                    def logsFound = sh(
                        script: """
                            aws logs describe-log-streams \
                                --log-group-name ${logGroupName} \
                                --order-by LastEventTime \
                                --descending \
                                --limit 1
                        """,
                        returnStatus: true
                    ) == 0
                    
                    if (logsFound) {
                        echo "Contrast agent initialization logs found"
                        
                        // Check for successful initialization
                        def successPattern = sh(
                            script: """
                                aws logs filter-log-events \
                                    --log-group-name ${logGroupName} \
                                    --filter-pattern '"Contrast agent copied successfully"' \
                                    --max-items 1
                            """,
                            returnStdout: true
                        )
                        
                        if (successPattern.contains('Contrast agent copied successfully')) {
                            echo "✓ Contrast agent initialized successfully"
                        } else {
                            error "✗ Contrast agent initialization may have failed"
                        }
                    } else {
                        echo "Warning: Could not find Contrast init logs"
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo "Deployment successful!"
            if (env.TF_VAR_contrast_enabled == 'true') {
                echo "Contrast agent has been deployed with the application"
            }
        }
        
        failure {
            echo "Deployment failed!"
            if (env.TF_VAR_contrast_enabled == 'true') {
                echo "Consider disabling Contrast agent and redeploying if it's causing issues"
            }
        }
        
        always {
            // Clean up sensitive environment variables
            script {
                env.TF_VAR_contrast_api_key = ''
                env.TF_VAR_contrast_service_key = ''
                env.TF_VAR_contrast_user_name = ''
            }
        }
    }
}
